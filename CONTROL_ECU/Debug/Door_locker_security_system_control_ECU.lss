
Door_locker_security_system_control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000010de  00001172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006c  0080006c  0000117e  2**0
                  ALLOC
  3 .stab         00001efc  00000000  00000000  00001180  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001187  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
      8a:	0c 94 6d 08 	jmp	0x10da	; 0x10da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Buzzer_init>:
 *  Created on: Mar 29, 2024
 *      Author: Omar Tarek
 */
#include "buzzer.h"

void Buzzer_init(void){
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
      9a:	83 e0       	ldi	r24, 0x03	; 3
      9c:	66 e0       	ldi	r22, 0x06	; 6
      9e:	41 e0       	ldi	r20, 0x01	; 1
      a0:	0e 94 6f 02 	call	0x4de	; 0x4de <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
      a4:	83 e0       	ldi	r24, 0x03	; 3
      a6:	66 e0       	ldi	r22, 0x06	; 6
      a8:	41 e0       	ldi	r20, 0x01	; 1
      aa:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <GPIO_writePin>
}
      ae:	cf 91       	pop	r28
      b0:	df 91       	pop	r29
      b2:	08 95       	ret

000000b4 <Buzzer_on>:


void Buzzer_on(void){
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
      bc:	83 e0       	ldi	r24, 0x03	; 3
      be:	66 e0       	ldi	r22, 0x06	; 6
      c0:	40 e0       	ldi	r20, 0x00	; 0
      c2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <GPIO_writePin>
}
      c6:	cf 91       	pop	r28
      c8:	df 91       	pop	r29
      ca:	08 95       	ret

000000cc <Buzzer_off>:



void Buzzer_off(void){
      cc:	df 93       	push	r29
      ce:	cf 93       	push	r28
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
      d4:	83 e0       	ldi	r24, 0x03	; 3
      d6:	66 e0       	ldi	r22, 0x06	; 6
      d8:	41 e0       	ldi	r20, 0x01	; 1
      da:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <GPIO_writePin>
}
      de:	cf 91       	pop	r28
      e0:	df 91       	pop	r29
      e2:	08 95       	ret

000000e4 <main>:
 *  Created on: Mar 29, 2024
 *      Author: Omar Tarek
 */
#include"control_ecu.h"

void main(void){
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	df 93       	push	r29
      ea:	cf 93       	push	r28
      ec:	00 d0       	rcall	.+0      	; 0xee <main+0xa>
      ee:	0f 92       	push	r0
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
	uint8 i,flag=1, loop=0;
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	8a 83       	std	Y+2, r24	; 0x02
      f8:	19 82       	std	Y+1, r1	; 0x01
	TWI_init(&config_twi);
      fa:	80 e6       	ldi	r24, 0x60	; 96
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	0e 94 a6 06 	call	0xd4c	; 0xd4c <TWI_init>
	UART_init(&config_uart);
     102:	85 e6       	ldi	r24, 0x65	; 101
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_init>
	while(1){
		if(loop==0){
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	88 23       	and	r24, r24
     10e:	09 f0       	breq	.+2      	; 0x112 <main+0x2e>
     110:	79 c0       	rjmp	.+242    	; 0x204 <main+0x120>
			flag=1;
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	8a 83       	std	Y+2, r24	; 0x02
			while(UART_recieveByte()!=MC1_READY);
     116:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
     11a:	80 31       	cpi	r24, 0x10	; 16
     11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x32>
			for(i=0;i<5;++i){
     11e:	1b 82       	std	Y+3, r1	; 0x03
     120:	0f c0       	rjmp	.+30     	; 0x140 <main+0x5c>
				UART_sendByte(MC2_READY);
     122:	80 e2       	ldi	r24, 0x20	; 32
     124:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
				pass[i]= UART_recieveByte();
     128:	8b 81       	ldd	r24, Y+3	; 0x03
     12a:	08 2f       	mov	r16, r24
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
     132:	f8 01       	movw	r30, r16
     134:	e2 59       	subi	r30, 0x92	; 146
     136:	ff 4f       	sbci	r31, 0xFF	; 255
     138:	80 83       	st	Z, r24
	UART_init(&config_uart);
	while(1){
		if(loop==0){
			flag=1;
			while(UART_recieveByte()!=MC1_READY);
			for(i=0;i<5;++i){
     13a:	8b 81       	ldd	r24, Y+3	; 0x03
     13c:	8f 5f       	subi	r24, 0xFF	; 255
     13e:	8b 83       	std	Y+3, r24	; 0x03
     140:	8b 81       	ldd	r24, Y+3	; 0x03
     142:	85 30       	cpi	r24, 0x05	; 5
     144:	70 f3       	brcs	.-36     	; 0x122 <main+0x3e>
				UART_sendByte(MC2_READY);
				pass[i]= UART_recieveByte();
			}


			while(UART_recieveByte()!=MC1_READY);
     146:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
     14a:	80 31       	cpi	r24, 0x10	; 16
     14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x62>

			for(i=0;i<5;++i){
     14e:	1b 82       	std	Y+3, r1	; 0x03
     150:	0f c0       	rjmp	.+30     	; 0x170 <main+0x8c>
				UART_sendByte(MC2_READY);
     152:	80 e2       	ldi	r24, 0x20	; 32
     154:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
				pass_verf[i]= UART_recieveByte();
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	08 2f       	mov	r16, r24
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
     162:	f8 01       	movw	r30, r16
     164:	ed 58       	subi	r30, 0x8D	; 141
     166:	ff 4f       	sbci	r31, 0xFF	; 255
     168:	80 83       	st	Z, r24
			}


			while(UART_recieveByte()!=MC1_READY);

			for(i=0;i<5;++i){
     16a:	8b 81       	ldd	r24, Y+3	; 0x03
     16c:	8f 5f       	subi	r24, 0xFF	; 255
     16e:	8b 83       	std	Y+3, r24	; 0x03
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	85 30       	cpi	r24, 0x05	; 5
     174:	70 f3       	brcs	.-36     	; 0x152 <main+0x6e>
				UART_sendByte(MC2_READY);
				pass_verf[i]= UART_recieveByte();
			}


			for(i=0;i<5;++i){
     176:	1b 82       	std	Y+3, r1	; 0x03
     178:	15 c0       	rjmp	.+42     	; 0x1a4 <main+0xc0>
				if(pass[i]!=pass_verf[i]){
     17a:	8b 81       	ldd	r24, Y+3	; 0x03
     17c:	88 2f       	mov	r24, r24
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	fc 01       	movw	r30, r24
     182:	e2 59       	subi	r30, 0x92	; 146
     184:	ff 4f       	sbci	r31, 0xFF	; 255
     186:	20 81       	ld	r18, Z
     188:	8b 81       	ldd	r24, Y+3	; 0x03
     18a:	88 2f       	mov	r24, r24
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	fc 01       	movw	r30, r24
     190:	ed 58       	subi	r30, 0x8D	; 141
     192:	ff 4f       	sbci	r31, 0xFF	; 255
     194:	80 81       	ld	r24, Z
     196:	28 17       	cp	r18, r24
     198:	11 f0       	breq	.+4      	; 0x19e <main+0xba>
					flag=0;
     19a:	1a 82       	std	Y+2, r1	; 0x02
     19c:	06 c0       	rjmp	.+12     	; 0x1aa <main+0xc6>
				UART_sendByte(MC2_READY);
				pass_verf[i]= UART_recieveByte();
			}


			for(i=0;i<5;++i){
     19e:	8b 81       	ldd	r24, Y+3	; 0x03
     1a0:	8f 5f       	subi	r24, 0xFF	; 255
     1a2:	8b 83       	std	Y+3, r24	; 0x03
     1a4:	8b 81       	ldd	r24, Y+3	; 0x03
     1a6:	85 30       	cpi	r24, 0x05	; 5
     1a8:	40 f3       	brcs	.-48     	; 0x17a <main+0x96>
				}
			}



			if(flag==1){
     1aa:	8a 81       	ldd	r24, Y+2	; 0x02
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	19 f5       	brne	.+70     	; 0x1f6 <main+0x112>

				while(UART_recieveByte()!= MC1_READY);
     1b0:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
     1b4:	80 31       	cpi	r24, 0x10	; 16
     1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0xcc>
				UART_sendByte(SUCCESS_PASS);
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
				loop=1;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	89 83       	std	Y+1, r24	; 0x01
				for(i=0;i<5;++i){
     1c2:	1b 82       	std	Y+3, r1	; 0x03
     1c4:	14 c0       	rjmp	.+40     	; 0x1ee <main+0x10a>
					EEPROM_writeByte(0x0311+i, pass[i]);
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	88 2f       	mov	r24, r24
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	8f 5e       	subi	r24, 0xEF	; 239
     1ce:	9c 4f       	sbci	r25, 0xFC	; 252
     1d0:	ac 01       	movw	r20, r24
     1d2:	8b 81       	ldd	r24, Y+3	; 0x03
     1d4:	88 2f       	mov	r24, r24
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	fc 01       	movw	r30, r24
     1da:	e2 59       	subi	r30, 0x92	; 146
     1dc:	ff 4f       	sbci	r31, 0xFF	; 255
     1de:	20 81       	ld	r18, Z
     1e0:	ca 01       	movw	r24, r20
     1e2:	62 2f       	mov	r22, r18
     1e4:	0e 94 ce 01 	call	0x39c	; 0x39c <EEPROM_writeByte>
			if(flag==1){

				while(UART_recieveByte()!= MC1_READY);
				UART_sendByte(SUCCESS_PASS);
				loop=1;
				for(i=0;i<5;++i){
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	8f 5f       	subi	r24, 0xFF	; 255
     1ec:	8b 83       	std	Y+3, r24	; 0x03
     1ee:	8b 81       	ldd	r24, Y+3	; 0x03
     1f0:	85 30       	cpi	r24, 0x05	; 5
     1f2:	48 f3       	brcs	.-46     	; 0x1c6 <main+0xe2>
     1f4:	07 c0       	rjmp	.+14     	; 0x204 <main+0x120>
					EEPROM_writeByte(0x0311+i, pass[i]);
				}
			}
			else{
				while(UART_recieveByte()!= MC1_READY);
     1f6:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
     1fa:	80 31       	cpi	r24, 0x10	; 16
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x112>
				UART_sendByte(FAIL_PASS);
     1fe:	82 e0       	ldi	r24, 0x02	; 2
     200:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
			}

		}
		if(loop==1){
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	79 f4       	brne	.+30     	; 0x228 <main+0x144>
			while(UART_recieveByte()!= MC1_READY);
     20a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
     20e:	80 31       	cpi	r24, 0x10	; 16
     210:	e1 f7       	brne	.-8      	; 0x20a <main+0x126>
			UART_sendByte(MC2_READY);
     212:	80 e2       	ldi	r24, 0x20	; 32
     214:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
			if(UART_recieveByte()==STORING_MODE){
     218:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
     21c:	85 35       	cpi	r24, 0x55	; 85
     21e:	11 f4       	brne	.+4      	; 0x224 <main+0x140>
				loop=0;
     220:	19 82       	std	Y+1, r1	; 0x01
     222:	02 c0       	rjmp	.+4      	; 0x228 <main+0x144>
			}else
			{
				loop=2;
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		if(loop==2){
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	09 f0       	breq	.+2      	; 0x230 <main+0x14c>
     22e:	6d cf       	rjmp	.-294    	; 0x10a <main+0x26>
			flag=1;
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	8a 83       	std	Y+2, r24	; 0x02
			while(UART_recieveByte()!=MC1_READY);
     234:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
     238:	80 31       	cpi	r24, 0x10	; 16
     23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x150>
			for(i=0;i<5;++i){
     23c:	1b 82       	std	Y+3, r1	; 0x03
     23e:	0f c0       	rjmp	.+30     	; 0x25e <main+0x17a>

				UART_sendByte(MC2_READY);
     240:	80 e2       	ldi	r24, 0x20	; 32
     242:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
				pass[i]= UART_recieveByte();
     246:	8b 81       	ldd	r24, Y+3	; 0x03
     248:	08 2f       	mov	r16, r24
     24a:	10 e0       	ldi	r17, 0x00	; 0
     24c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
     250:	f8 01       	movw	r30, r16
     252:	e2 59       	subi	r30, 0x92	; 146
     254:	ff 4f       	sbci	r31, 0xFF	; 255
     256:	80 83       	st	Z, r24
			}
		}
		if(loop==2){
			flag=1;
			while(UART_recieveByte()!=MC1_READY);
			for(i=0;i<5;++i){
     258:	8b 81       	ldd	r24, Y+3	; 0x03
     25a:	8f 5f       	subi	r24, 0xFF	; 255
     25c:	8b 83       	std	Y+3, r24	; 0x03
     25e:	8b 81       	ldd	r24, Y+3	; 0x03
     260:	85 30       	cpi	r24, 0x05	; 5
     262:	70 f3       	brcs	.-36     	; 0x240 <main+0x15c>

				UART_sendByte(MC2_READY);
				pass[i]= UART_recieveByte();
			}
			for(i=0;i<5;++i){
     264:	1b 82       	std	Y+3, r1	; 0x03
     266:	13 c0       	rjmp	.+38     	; 0x28e <main+0x1aa>
				EEPROM_readByte(0x0311+i,pass_verf+i);
     268:	8b 81       	ldd	r24, Y+3	; 0x03
     26a:	88 2f       	mov	r24, r24
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	8f 5e       	subi	r24, 0xEF	; 239
     270:	9c 4f       	sbci	r25, 0xFC	; 252
     272:	ac 01       	movw	r20, r24
     274:	8b 81       	ldd	r24, Y+3	; 0x03
     276:	88 2f       	mov	r24, r24
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	9c 01       	movw	r18, r24
     27c:	2d 58       	subi	r18, 0x8D	; 141
     27e:	3f 4f       	sbci	r19, 0xFF	; 255
     280:	ca 01       	movw	r24, r20
     282:	b9 01       	movw	r22, r18
     284:	0e 94 0f 02 	call	0x41e	; 0x41e <EEPROM_readByte>
			for(i=0;i<5;++i){

				UART_sendByte(MC2_READY);
				pass[i]= UART_recieveByte();
			}
			for(i=0;i<5;++i){
     288:	8b 81       	ldd	r24, Y+3	; 0x03
     28a:	8f 5f       	subi	r24, 0xFF	; 255
     28c:	8b 83       	std	Y+3, r24	; 0x03
     28e:	8b 81       	ldd	r24, Y+3	; 0x03
     290:	85 30       	cpi	r24, 0x05	; 5
     292:	50 f3       	brcs	.-44     	; 0x268 <main+0x184>
				EEPROM_readByte(0x0311+i,pass_verf+i);
			}
			for(i=0;i<5;++i){
     294:	1b 82       	std	Y+3, r1	; 0x03
     296:	15 c0       	rjmp	.+42     	; 0x2c2 <main+0x1de>
				if(pass[i]!=pass_verf[i]){
     298:	8b 81       	ldd	r24, Y+3	; 0x03
     29a:	88 2f       	mov	r24, r24
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	fc 01       	movw	r30, r24
     2a0:	e2 59       	subi	r30, 0x92	; 146
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	20 81       	ld	r18, Z
     2a6:	8b 81       	ldd	r24, Y+3	; 0x03
     2a8:	88 2f       	mov	r24, r24
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	fc 01       	movw	r30, r24
     2ae:	ed 58       	subi	r30, 0x8D	; 141
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	80 81       	ld	r24, Z
     2b4:	28 17       	cp	r18, r24
     2b6:	11 f0       	breq	.+4      	; 0x2bc <main+0x1d8>
					flag = 0;
     2b8:	1a 82       	std	Y+2, r1	; 0x02
     2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <main+0x1e4>
				pass[i]= UART_recieveByte();
			}
			for(i=0;i<5;++i){
				EEPROM_readByte(0x0311+i,pass_verf+i);
			}
			for(i=0;i<5;++i){
     2bc:	8b 81       	ldd	r24, Y+3	; 0x03
     2be:	8f 5f       	subi	r24, 0xFF	; 255
     2c0:	8b 83       	std	Y+3, r24	; 0x03
     2c2:	8b 81       	ldd	r24, Y+3	; 0x03
     2c4:	85 30       	cpi	r24, 0x05	; 5
     2c6:	40 f3       	brcs	.-48     	; 0x298 <main+0x1b4>
				if(pass[i]!=pass_verf[i]){
					flag = 0;
					break;
				}
			}
			if(flag==1){
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	59 f4       	brne	.+22     	; 0x2e4 <main+0x200>
				while(UART_recieveByte() != MC1_READY);
     2ce:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
     2d2:	80 31       	cpi	r24, 0x10	; 16
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0x1ea>
				UART_sendByte(MC2_READY);
     2d6:	80 e2       	ldi	r24, 0x20	; 32
     2d8:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
				UART_sendByte(SUCCESS_PASS);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
     2e2:	13 cf       	rjmp	.-474    	; 0x10a <main+0x26>
			}else{
				while(UART_recieveByte() != MC1_READY);
     2e4:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
     2e8:	80 31       	cpi	r24, 0x10	; 16
     2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x200>
				UART_sendByte(MC2_READY);
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
				UART_sendByte(FAIL_PASS);
     2f2:	82 e0       	ldi	r24, 0x02	; 2
     2f4:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
     2f8:	08 cf       	rjmp	.-496    	; 0x10a <main+0x26>

000002fa <DcMotor_init>:
 */
#include "dc_motor.h"
#include"pwm.h"
#include "common_macros.h"
#include "gpio.h"
void DcMotor_init(){
     2fa:	df 93       	push	r29
     2fc:	cf 93       	push	r28
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	61 e0       	ldi	r22, 0x01	; 1
     306:	41 e0       	ldi	r20, 0x01	; 1
     308:	0e 94 6f 02 	call	0x4de	; 0x4de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN2_ID,PIN_OUTPUT);
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	62 e0       	ldi	r22, 0x02	; 2
     310:	41 e0       	ldi	r20, 0x01	; 1
     312:	0e 94 6f 02 	call	0x4de	; 0x4de <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID,PIN4_ID,LOGIC_LOW);
     316:	83 e0       	ldi	r24, 0x03	; 3
     318:	64 e0       	ldi	r22, 0x04	; 4
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <GPIO_writePin>
	GPIO_writePin(PORTD_ID,PIN5_ID,LOGIC_LOW);
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	65 e0       	ldi	r22, 0x05	; 5
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <GPIO_writePin>
}
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	00 d0       	rcall	.+0      	; 0x336 <DcMotor_Rotate+0x6>
     336:	00 d0       	rcall	.+0      	; 0x338 <DcMotor_Rotate+0x8>
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	89 83       	std	Y+1, r24	; 0x01
     33e:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	28 2f       	mov	r18, r24
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	3c 83       	std	Y+4, r19	; 0x04
     348:	2b 83       	std	Y+3, r18	; 0x03
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	9c 81       	ldd	r25, Y+4	; 0x04
     34e:	00 97       	sbiw	r24, 0x00	; 0
     350:	31 f0       	breq	.+12     	; 0x35e <DcMotor_Rotate+0x2e>
     352:	2b 81       	ldd	r18, Y+3	; 0x03
     354:	3c 81       	ldd	r19, Y+4	; 0x04
     356:	21 30       	cpi	r18, 0x01	; 1
     358:	31 05       	cpc	r19, r1
     35a:	61 f0       	breq	.+24     	; 0x374 <DcMotor_Rotate+0x44>
     35c:	15 c0       	rjmp	.+42     	; 0x388 <DcMotor_Rotate+0x58>
	case stopped:
		GPIO_writePin(PORTB_ID,PIN1_ID,LOGIC_LOW);
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	40 e0       	ldi	r20, 0x00	; 0
     364:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <GPIO_writePin>
		GPIO_writePin(PORTB_ID,PIN2_ID,LOGIC_LOW);
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	62 e0       	ldi	r22, 0x02	; 2
     36c:	40 e0       	ldi	r20, 0x00	; 0
     36e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <GPIO_writePin>
     372:	0a c0       	rjmp	.+20     	; 0x388 <DcMotor_Rotate+0x58>
		break;
	case clockwise:
		GPIO_writePin(PORTB_ID,PIN1_ID,LOGIC_HIGH);
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <GPIO_writePin>
		GPIO_writePin(PORTB_ID,PIN2_ID,LOGIC_LOW);
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	62 e0       	ldi	r22, 0x02	; 2
     382:	40 e0       	ldi	r20, 0x00	; 0
     384:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <GPIO_writePin>
		break;
	}
	Timer0_PWM_init(speed);
     388:	8a 81       	ldd	r24, Y+2	; 0x02
     38a:	0e 94 b8 05 	call	0xb70	; 0xb70 <Timer0_PWM_init>
}
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	cf 91       	pop	r28
     398:	df 91       	pop	r29
     39a:	08 95       	ret

0000039c <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <EEPROM_writeByte+0x6>
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <EEPROM_writeByte+0x8>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	9a 83       	std	Y+2, r25	; 0x02
     3aa:	89 83       	std	Y+1, r24	; 0x01
     3ac:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     3ae:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     3b2:	0e 94 34 07 	call	0xe68	; 0xe68 <TWI_getStatus>
     3b6:	88 30       	cpi	r24, 0x08	; 8
     3b8:	11 f0       	breq	.+4      	; 0x3be <EEPROM_writeByte+0x22>
        return ERROR;
     3ba:	1c 82       	std	Y+4, r1	; 0x04
     3bc:	28 c0       	rjmp	.+80     	; 0x40e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	9a 81       	ldd	r25, Y+2	; 0x02
     3c2:	80 70       	andi	r24, 0x00	; 0
     3c4:	97 70       	andi	r25, 0x07	; 7
     3c6:	88 0f       	add	r24, r24
     3c8:	89 2f       	mov	r24, r25
     3ca:	88 1f       	adc	r24, r24
     3cc:	99 0b       	sbc	r25, r25
     3ce:	91 95       	neg	r25
     3d0:	80 6a       	ori	r24, 0xA0	; 160
     3d2:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     3d6:	0e 94 34 07 	call	0xe68	; 0xe68 <TWI_getStatus>
     3da:	88 31       	cpi	r24, 0x18	; 24
     3dc:	11 f0       	breq	.+4      	; 0x3e2 <EEPROM_writeByte+0x46>
        return ERROR; 
     3de:	1c 82       	std	Y+4, r1	; 0x04
     3e0:	16 c0       	rjmp	.+44     	; 0x40e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     3e8:	0e 94 34 07 	call	0xe68	; 0xe68 <TWI_getStatus>
     3ec:	88 32       	cpi	r24, 0x28	; 40
     3ee:	11 f0       	breq	.+4      	; 0x3f4 <EEPROM_writeByte+0x58>
        return ERROR;
     3f0:	1c 82       	std	Y+4, r1	; 0x04
     3f2:	0d c0       	rjmp	.+26     	; 0x40e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     3f4:	8b 81       	ldd	r24, Y+3	; 0x03
     3f6:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     3fa:	0e 94 34 07 	call	0xe68	; 0xe68 <TWI_getStatus>
     3fe:	88 32       	cpi	r24, 0x28	; 40
     400:	11 f0       	breq	.+4      	; 0x406 <EEPROM_writeByte+0x6a>
        return ERROR;
     402:	1c 82       	std	Y+4, r1	; 0x04
     404:	04 c0       	rjmp	.+8      	; 0x40e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     406:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <TWI_stop>
	
    return SUCCESS;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	8c 83       	std	Y+4, r24	; 0x04
     40e:	8c 81       	ldd	r24, Y+4	; 0x04
}
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	cf 91       	pop	r28
     41a:	df 91       	pop	r29
     41c:	08 95       	ret

0000041e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     41e:	df 93       	push	r29
     420:	cf 93       	push	r28
     422:	00 d0       	rcall	.+0      	; 0x424 <EEPROM_readByte+0x6>
     424:	00 d0       	rcall	.+0      	; 0x426 <EEPROM_readByte+0x8>
     426:	0f 92       	push	r0
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	9a 83       	std	Y+2, r25	; 0x02
     42e:	89 83       	std	Y+1, r24	; 0x01
     430:	7c 83       	std	Y+4, r23	; 0x04
     432:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     434:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     438:	0e 94 34 07 	call	0xe68	; 0xe68 <TWI_getStatus>
     43c:	88 30       	cpi	r24, 0x08	; 8
     43e:	11 f0       	breq	.+4      	; 0x444 <EEPROM_readByte+0x26>
        return ERROR;
     440:	1d 82       	std	Y+5, r1	; 0x05
     442:	44 c0       	rjmp	.+136    	; 0x4cc <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	9a 81       	ldd	r25, Y+2	; 0x02
     448:	80 70       	andi	r24, 0x00	; 0
     44a:	97 70       	andi	r25, 0x07	; 7
     44c:	88 0f       	add	r24, r24
     44e:	89 2f       	mov	r24, r25
     450:	88 1f       	adc	r24, r24
     452:	99 0b       	sbc	r25, r25
     454:	91 95       	neg	r25
     456:	80 6a       	ori	r24, 0xA0	; 160
     458:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     45c:	0e 94 34 07 	call	0xe68	; 0xe68 <TWI_getStatus>
     460:	88 31       	cpi	r24, 0x18	; 24
     462:	11 f0       	breq	.+4      	; 0x468 <EEPROM_readByte+0x4a>
        return ERROR;
     464:	1d 82       	std	Y+5, r1	; 0x05
     466:	32 c0       	rjmp	.+100    	; 0x4cc <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     46e:	0e 94 34 07 	call	0xe68	; 0xe68 <TWI_getStatus>
     472:	88 32       	cpi	r24, 0x28	; 40
     474:	11 f0       	breq	.+4      	; 0x47a <EEPROM_readByte+0x5c>
        return ERROR;
     476:	1d 82       	std	Y+5, r1	; 0x05
     478:	29 c0       	rjmp	.+82     	; 0x4cc <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     47a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     47e:	0e 94 34 07 	call	0xe68	; 0xe68 <TWI_getStatus>
     482:	80 31       	cpi	r24, 0x10	; 16
     484:	11 f0       	breq	.+4      	; 0x48a <EEPROM_readByte+0x6c>
        return ERROR;
     486:	1d 82       	std	Y+5, r1	; 0x05
     488:	21 c0       	rjmp	.+66     	; 0x4cc <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	9a 81       	ldd	r25, Y+2	; 0x02
     48e:	80 70       	andi	r24, 0x00	; 0
     490:	97 70       	andi	r25, 0x07	; 7
     492:	88 0f       	add	r24, r24
     494:	89 2f       	mov	r24, r25
     496:	88 1f       	adc	r24, r24
     498:	99 0b       	sbc	r25, r25
     49a:	91 95       	neg	r25
     49c:	81 6a       	ori	r24, 0xA1	; 161
     49e:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     4a2:	0e 94 34 07 	call	0xe68	; 0xe68 <TWI_getStatus>
     4a6:	80 34       	cpi	r24, 0x40	; 64
     4a8:	11 f0       	breq	.+4      	; 0x4ae <EEPROM_readByte+0x90>
        return ERROR;
     4aa:	1d 82       	std	Y+5, r1	; 0x05
     4ac:	0f c0       	rjmp	.+30     	; 0x4cc <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     4ae:	0e 94 21 07 	call	0xe42	; 0xe42 <TWI_readByteWithNACK>
     4b2:	eb 81       	ldd	r30, Y+3	; 0x03
     4b4:	fc 81       	ldd	r31, Y+4	; 0x04
     4b6:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     4b8:	0e 94 34 07 	call	0xe68	; 0xe68 <TWI_getStatus>
     4bc:	88 35       	cpi	r24, 0x58	; 88
     4be:	11 f0       	breq	.+4      	; 0x4c4 <EEPROM_readByte+0xa6>
        return ERROR;
     4c0:	1d 82       	std	Y+5, r1	; 0x05
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     4c4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <TWI_stop>

    return SUCCESS;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	8d 83       	std	Y+5, r24	; 0x05
     4cc:	8d 81       	ldd	r24, Y+5	; 0x05
}
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	cf 91       	pop	r28
     4da:	df 91       	pop	r29
     4dc:	08 95       	ret

000004de <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     4de:	df 93       	push	r29
     4e0:	cf 93       	push	r28
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <GPIO_setupPinDirection+0x6>
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <GPIO_setupPinDirection+0x8>
     4e6:	0f 92       	push	r0
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	89 83       	std	Y+1, r24	; 0x01
     4ee:	6a 83       	std	Y+2, r22	; 0x02
     4f0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	88 30       	cpi	r24, 0x08	; 8
     4f6:	08 f0       	brcs	.+2      	; 0x4fa <GPIO_setupPinDirection+0x1c>
     4f8:	d5 c0       	rjmp	.+426    	; 0x6a4 <GPIO_setupPinDirection+0x1c6>
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	84 30       	cpi	r24, 0x04	; 4
     4fe:	08 f0       	brcs	.+2      	; 0x502 <GPIO_setupPinDirection+0x24>
     500:	d1 c0       	rjmp	.+418    	; 0x6a4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	28 2f       	mov	r18, r24
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	3d 83       	std	Y+5, r19	; 0x05
     50a:	2c 83       	std	Y+4, r18	; 0x04
     50c:	8c 81       	ldd	r24, Y+4	; 0x04
     50e:	9d 81       	ldd	r25, Y+5	; 0x05
     510:	81 30       	cpi	r24, 0x01	; 1
     512:	91 05       	cpc	r25, r1
     514:	09 f4       	brne	.+2      	; 0x518 <GPIO_setupPinDirection+0x3a>
     516:	43 c0       	rjmp	.+134    	; 0x59e <GPIO_setupPinDirection+0xc0>
     518:	2c 81       	ldd	r18, Y+4	; 0x04
     51a:	3d 81       	ldd	r19, Y+5	; 0x05
     51c:	22 30       	cpi	r18, 0x02	; 2
     51e:	31 05       	cpc	r19, r1
     520:	2c f4       	brge	.+10     	; 0x52c <GPIO_setupPinDirection+0x4e>
     522:	8c 81       	ldd	r24, Y+4	; 0x04
     524:	9d 81       	ldd	r25, Y+5	; 0x05
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	71 f0       	breq	.+28     	; 0x546 <GPIO_setupPinDirection+0x68>
     52a:	bc c0       	rjmp	.+376    	; 0x6a4 <GPIO_setupPinDirection+0x1c6>
     52c:	2c 81       	ldd	r18, Y+4	; 0x04
     52e:	3d 81       	ldd	r19, Y+5	; 0x05
     530:	22 30       	cpi	r18, 0x02	; 2
     532:	31 05       	cpc	r19, r1
     534:	09 f4       	brne	.+2      	; 0x538 <GPIO_setupPinDirection+0x5a>
     536:	5f c0       	rjmp	.+190    	; 0x5f6 <GPIO_setupPinDirection+0x118>
     538:	8c 81       	ldd	r24, Y+4	; 0x04
     53a:	9d 81       	ldd	r25, Y+5	; 0x05
     53c:	83 30       	cpi	r24, 0x03	; 3
     53e:	91 05       	cpc	r25, r1
     540:	09 f4       	brne	.+2      	; 0x544 <GPIO_setupPinDirection+0x66>
     542:	85 c0       	rjmp	.+266    	; 0x64e <GPIO_setupPinDirection+0x170>
     544:	af c0       	rjmp	.+350    	; 0x6a4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	81 30       	cpi	r24, 0x01	; 1
     54a:	a1 f4       	brne	.+40     	; 0x574 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     54c:	aa e3       	ldi	r26, 0x3A	; 58
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	ea e3       	ldi	r30, 0x3A	; 58
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	48 2f       	mov	r20, r24
     558:	8a 81       	ldd	r24, Y+2	; 0x02
     55a:	28 2f       	mov	r18, r24
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	02 2e       	mov	r0, r18
     564:	02 c0       	rjmp	.+4      	; 0x56a <GPIO_setupPinDirection+0x8c>
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	0a 94       	dec	r0
     56c:	e2 f7       	brpl	.-8      	; 0x566 <GPIO_setupPinDirection+0x88>
     56e:	84 2b       	or	r24, r20
     570:	8c 93       	st	X, r24
     572:	98 c0       	rjmp	.+304    	; 0x6a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     574:	aa e3       	ldi	r26, 0x3A	; 58
     576:	b0 e0       	ldi	r27, 0x00	; 0
     578:	ea e3       	ldi	r30, 0x3A	; 58
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	48 2f       	mov	r20, r24
     580:	8a 81       	ldd	r24, Y+2	; 0x02
     582:	28 2f       	mov	r18, r24
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	02 2e       	mov	r0, r18
     58c:	02 c0       	rjmp	.+4      	; 0x592 <GPIO_setupPinDirection+0xb4>
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	0a 94       	dec	r0
     594:	e2 f7       	brpl	.-8      	; 0x58e <GPIO_setupPinDirection+0xb0>
     596:	80 95       	com	r24
     598:	84 23       	and	r24, r20
     59a:	8c 93       	st	X, r24
     59c:	83 c0       	rjmp	.+262    	; 0x6a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     59e:	8b 81       	ldd	r24, Y+3	; 0x03
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	a1 f4       	brne	.+40     	; 0x5cc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     5a4:	a7 e3       	ldi	r26, 0x37	; 55
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	e7 e3       	ldi	r30, 0x37	; 55
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	48 2f       	mov	r20, r24
     5b0:	8a 81       	ldd	r24, Y+2	; 0x02
     5b2:	28 2f       	mov	r18, r24
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	02 2e       	mov	r0, r18
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <GPIO_setupPinDirection+0xe4>
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	0a 94       	dec	r0
     5c4:	e2 f7       	brpl	.-8      	; 0x5be <GPIO_setupPinDirection+0xe0>
     5c6:	84 2b       	or	r24, r20
     5c8:	8c 93       	st	X, r24
     5ca:	6c c0       	rjmp	.+216    	; 0x6a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     5cc:	a7 e3       	ldi	r26, 0x37	; 55
     5ce:	b0 e0       	ldi	r27, 0x00	; 0
     5d0:	e7 e3       	ldi	r30, 0x37	; 55
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	80 81       	ld	r24, Z
     5d6:	48 2f       	mov	r20, r24
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	28 2f       	mov	r18, r24
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	02 2e       	mov	r0, r18
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <GPIO_setupPinDirection+0x10c>
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	0a 94       	dec	r0
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <GPIO_setupPinDirection+0x108>
     5ee:	80 95       	com	r24
     5f0:	84 23       	and	r24, r20
     5f2:	8c 93       	st	X, r24
     5f4:	57 c0       	rjmp	.+174    	; 0x6a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	81 30       	cpi	r24, 0x01	; 1
     5fa:	a1 f4       	brne	.+40     	; 0x624 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     5fc:	a4 e3       	ldi	r26, 0x34	; 52
     5fe:	b0 e0       	ldi	r27, 0x00	; 0
     600:	e4 e3       	ldi	r30, 0x34	; 52
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	48 2f       	mov	r20, r24
     608:	8a 81       	ldd	r24, Y+2	; 0x02
     60a:	28 2f       	mov	r18, r24
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	02 2e       	mov	r0, r18
     614:	02 c0       	rjmp	.+4      	; 0x61a <GPIO_setupPinDirection+0x13c>
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	0a 94       	dec	r0
     61c:	e2 f7       	brpl	.-8      	; 0x616 <GPIO_setupPinDirection+0x138>
     61e:	84 2b       	or	r24, r20
     620:	8c 93       	st	X, r24
     622:	40 c0       	rjmp	.+128    	; 0x6a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     624:	a4 e3       	ldi	r26, 0x34	; 52
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	e4 e3       	ldi	r30, 0x34	; 52
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	48 2f       	mov	r20, r24
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	28 2f       	mov	r18, r24
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	02 2e       	mov	r0, r18
     63c:	02 c0       	rjmp	.+4      	; 0x642 <GPIO_setupPinDirection+0x164>
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	0a 94       	dec	r0
     644:	e2 f7       	brpl	.-8      	; 0x63e <GPIO_setupPinDirection+0x160>
     646:	80 95       	com	r24
     648:	84 23       	and	r24, r20
     64a:	8c 93       	st	X, r24
     64c:	2b c0       	rjmp	.+86     	; 0x6a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     64e:	8b 81       	ldd	r24, Y+3	; 0x03
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	a1 f4       	brne	.+40     	; 0x67c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     654:	a1 e3       	ldi	r26, 0x31	; 49
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	e1 e3       	ldi	r30, 0x31	; 49
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	48 2f       	mov	r20, r24
     660:	8a 81       	ldd	r24, Y+2	; 0x02
     662:	28 2f       	mov	r18, r24
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	02 2e       	mov	r0, r18
     66c:	02 c0       	rjmp	.+4      	; 0x672 <GPIO_setupPinDirection+0x194>
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	0a 94       	dec	r0
     674:	e2 f7       	brpl	.-8      	; 0x66e <GPIO_setupPinDirection+0x190>
     676:	84 2b       	or	r24, r20
     678:	8c 93       	st	X, r24
     67a:	14 c0       	rjmp	.+40     	; 0x6a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     67c:	a1 e3       	ldi	r26, 0x31	; 49
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	e1 e3       	ldi	r30, 0x31	; 49
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	48 2f       	mov	r20, r24
     688:	8a 81       	ldd	r24, Y+2	; 0x02
     68a:	28 2f       	mov	r18, r24
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	02 2e       	mov	r0, r18
     694:	02 c0       	rjmp	.+4      	; 0x69a <GPIO_setupPinDirection+0x1bc>
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	0a 94       	dec	r0
     69c:	e2 f7       	brpl	.-8      	; 0x696 <GPIO_setupPinDirection+0x1b8>
     69e:	80 95       	com	r24
     6a0:	84 23       	and	r24, r20
     6a2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	cf 91       	pop	r28
     6b0:	df 91       	pop	r29
     6b2:	08 95       	ret

000006b4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     6b4:	df 93       	push	r29
     6b6:	cf 93       	push	r28
     6b8:	00 d0       	rcall	.+0      	; 0x6ba <GPIO_writePin+0x6>
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <GPIO_writePin+0x8>
     6bc:	0f 92       	push	r0
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	89 83       	std	Y+1, r24	; 0x01
     6c4:	6a 83       	std	Y+2, r22	; 0x02
     6c6:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>NUM_OF_PORTS|| pin_num > NUM_OF_PINS_PER_PORT )
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	85 30       	cpi	r24, 0x05	; 5
     6cc:	08 f0       	brcs	.+2      	; 0x6d0 <GPIO_writePin+0x1c>
     6ce:	d5 c0       	rjmp	.+426    	; 0x87a <__stack+0x1b>
     6d0:	8a 81       	ldd	r24, Y+2	; 0x02
     6d2:	89 30       	cpi	r24, 0x09	; 9
     6d4:	08 f0       	brcs	.+2      	; 0x6d8 <GPIO_writePin+0x24>
     6d6:	d1 c0       	rjmp	.+418    	; 0x87a <__stack+0x1b>
	{

	}else
	{
		switch(port_num)
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	28 2f       	mov	r18, r24
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	3d 83       	std	Y+5, r19	; 0x05
     6e0:	2c 83       	std	Y+4, r18	; 0x04
     6e2:	8c 81       	ldd	r24, Y+4	; 0x04
     6e4:	9d 81       	ldd	r25, Y+5	; 0x05
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	91 05       	cpc	r25, r1
     6ea:	09 f4       	brne	.+2      	; 0x6ee <GPIO_writePin+0x3a>
     6ec:	43 c0       	rjmp	.+134    	; 0x774 <GPIO_writePin+0xc0>
     6ee:	2c 81       	ldd	r18, Y+4	; 0x04
     6f0:	3d 81       	ldd	r19, Y+5	; 0x05
     6f2:	22 30       	cpi	r18, 0x02	; 2
     6f4:	31 05       	cpc	r19, r1
     6f6:	2c f4       	brge	.+10     	; 0x702 <GPIO_writePin+0x4e>
     6f8:	8c 81       	ldd	r24, Y+4	; 0x04
     6fa:	9d 81       	ldd	r25, Y+5	; 0x05
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	71 f0       	breq	.+28     	; 0x71c <GPIO_writePin+0x68>
     700:	bc c0       	rjmp	.+376    	; 0x87a <__stack+0x1b>
     702:	2c 81       	ldd	r18, Y+4	; 0x04
     704:	3d 81       	ldd	r19, Y+5	; 0x05
     706:	22 30       	cpi	r18, 0x02	; 2
     708:	31 05       	cpc	r19, r1
     70a:	09 f4       	brne	.+2      	; 0x70e <GPIO_writePin+0x5a>
     70c:	5f c0       	rjmp	.+190    	; 0x7cc <GPIO_writePin+0x118>
     70e:	8c 81       	ldd	r24, Y+4	; 0x04
     710:	9d 81       	ldd	r25, Y+5	; 0x05
     712:	83 30       	cpi	r24, 0x03	; 3
     714:	91 05       	cpc	r25, r1
     716:	09 f4       	brne	.+2      	; 0x71a <GPIO_writePin+0x66>
     718:	85 c0       	rjmp	.+266    	; 0x824 <GPIO_writePin+0x170>
     71a:	af c0       	rjmp	.+350    	; 0x87a <__stack+0x1b>
		{
		case PORTA_ID:
			if(value == LOGIC_LOW){
     71c:	8b 81       	ldd	r24, Y+3	; 0x03
     71e:	88 23       	and	r24, r24
     720:	a9 f4       	brne	.+42     	; 0x74c <GPIO_writePin+0x98>
				CLEAR_BIT(PORTA,pin_num);
     722:	ab e3       	ldi	r26, 0x3B	; 59
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	eb e3       	ldi	r30, 0x3B	; 59
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	48 2f       	mov	r20, r24
     72e:	8a 81       	ldd	r24, Y+2	; 0x02
     730:	28 2f       	mov	r18, r24
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	02 2e       	mov	r0, r18
     73a:	02 c0       	rjmp	.+4      	; 0x740 <GPIO_writePin+0x8c>
     73c:	88 0f       	add	r24, r24
     73e:	99 1f       	adc	r25, r25
     740:	0a 94       	dec	r0
     742:	e2 f7       	brpl	.-8      	; 0x73c <GPIO_writePin+0x88>
     744:	80 95       	com	r24
     746:	84 23       	and	r24, r20
     748:	8c 93       	st	X, r24
     74a:	97 c0       	rjmp	.+302    	; 0x87a <__stack+0x1b>
			}else{
				SET_BIT(PORTA,pin_num);
     74c:	ab e3       	ldi	r26, 0x3B	; 59
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	eb e3       	ldi	r30, 0x3B	; 59
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	48 2f       	mov	r20, r24
     758:	8a 81       	ldd	r24, Y+2	; 0x02
     75a:	28 2f       	mov	r18, r24
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	02 2e       	mov	r0, r18
     764:	02 c0       	rjmp	.+4      	; 0x76a <GPIO_writePin+0xb6>
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	0a 94       	dec	r0
     76c:	e2 f7       	brpl	.-8      	; 0x766 <GPIO_writePin+0xb2>
     76e:	84 2b       	or	r24, r20
     770:	8c 93       	st	X, r24
     772:	83 c0       	rjmp	.+262    	; 0x87a <__stack+0x1b>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_LOW){
     774:	8b 81       	ldd	r24, Y+3	; 0x03
     776:	88 23       	and	r24, r24
     778:	a9 f4       	brne	.+42     	; 0x7a4 <GPIO_writePin+0xf0>
				CLEAR_BIT(PORTB,pin_num);
     77a:	a8 e3       	ldi	r26, 0x38	; 56
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e8 e3       	ldi	r30, 0x38	; 56
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	48 2f       	mov	r20, r24
     786:	8a 81       	ldd	r24, Y+2	; 0x02
     788:	28 2f       	mov	r18, r24
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	02 2e       	mov	r0, r18
     792:	02 c0       	rjmp	.+4      	; 0x798 <GPIO_writePin+0xe4>
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	0a 94       	dec	r0
     79a:	e2 f7       	brpl	.-8      	; 0x794 <GPIO_writePin+0xe0>
     79c:	80 95       	com	r24
     79e:	84 23       	and	r24, r20
     7a0:	8c 93       	st	X, r24
     7a2:	6b c0       	rjmp	.+214    	; 0x87a <__stack+0x1b>
			}else{
				SET_BIT(PORTB,pin_num);
     7a4:	a8 e3       	ldi	r26, 0x38	; 56
     7a6:	b0 e0       	ldi	r27, 0x00	; 0
     7a8:	e8 e3       	ldi	r30, 0x38	; 56
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	48 2f       	mov	r20, r24
     7b0:	8a 81       	ldd	r24, Y+2	; 0x02
     7b2:	28 2f       	mov	r18, r24
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	02 2e       	mov	r0, r18
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <GPIO_writePin+0x10e>
     7be:	88 0f       	add	r24, r24
     7c0:	99 1f       	adc	r25, r25
     7c2:	0a 94       	dec	r0
     7c4:	e2 f7       	brpl	.-8      	; 0x7be <GPIO_writePin+0x10a>
     7c6:	84 2b       	or	r24, r20
     7c8:	8c 93       	st	X, r24
     7ca:	57 c0       	rjmp	.+174    	; 0x87a <__stack+0x1b>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_LOW){
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	88 23       	and	r24, r24
     7d0:	a9 f4       	brne	.+42     	; 0x7fc <GPIO_writePin+0x148>
				CLEAR_BIT(PORTC,pin_num);
     7d2:	a5 e3       	ldi	r26, 0x35	; 53
     7d4:	b0 e0       	ldi	r27, 0x00	; 0
     7d6:	e5 e3       	ldi	r30, 0x35	; 53
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	80 81       	ld	r24, Z
     7dc:	48 2f       	mov	r20, r24
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	28 2f       	mov	r18, r24
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	02 2e       	mov	r0, r18
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <GPIO_writePin+0x13c>
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	0a 94       	dec	r0
     7f2:	e2 f7       	brpl	.-8      	; 0x7ec <GPIO_writePin+0x138>
     7f4:	80 95       	com	r24
     7f6:	84 23       	and	r24, r20
     7f8:	8c 93       	st	X, r24
     7fa:	3f c0       	rjmp	.+126    	; 0x87a <__stack+0x1b>
			}else{
				SET_BIT(PORTC,pin_num);
     7fc:	a5 e3       	ldi	r26, 0x35	; 53
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	e5 e3       	ldi	r30, 0x35	; 53
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	48 2f       	mov	r20, r24
     808:	8a 81       	ldd	r24, Y+2	; 0x02
     80a:	28 2f       	mov	r18, r24
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	02 2e       	mov	r0, r18
     814:	02 c0       	rjmp	.+4      	; 0x81a <GPIO_writePin+0x166>
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	0a 94       	dec	r0
     81c:	e2 f7       	brpl	.-8      	; 0x816 <GPIO_writePin+0x162>
     81e:	84 2b       	or	r24, r20
     820:	8c 93       	st	X, r24
     822:	2b c0       	rjmp	.+86     	; 0x87a <__stack+0x1b>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_LOW){
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	88 23       	and	r24, r24
     828:	a9 f4       	brne	.+42     	; 0x854 <GPIO_writePin+0x1a0>
				CLEAR_BIT(PORTD,pin_num);
     82a:	a2 e3       	ldi	r26, 0x32	; 50
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	e2 e3       	ldi	r30, 0x32	; 50
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	48 2f       	mov	r20, r24
     836:	8a 81       	ldd	r24, Y+2	; 0x02
     838:	28 2f       	mov	r18, r24
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	02 2e       	mov	r0, r18
     842:	02 c0       	rjmp	.+4      	; 0x848 <GPIO_writePin+0x194>
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	0a 94       	dec	r0
     84a:	e2 f7       	brpl	.-8      	; 0x844 <GPIO_writePin+0x190>
     84c:	80 95       	com	r24
     84e:	84 23       	and	r24, r20
     850:	8c 93       	st	X, r24
     852:	13 c0       	rjmp	.+38     	; 0x87a <__stack+0x1b>
			}else{
				SET_BIT(PORTD,pin_num);
     854:	a2 e3       	ldi	r26, 0x32	; 50
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	e2 e3       	ldi	r30, 0x32	; 50
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	48 2f       	mov	r20, r24
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	28 2f       	mov	r18, r24
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	02 2e       	mov	r0, r18
     86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	0a 94       	dec	r0
     874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
     876:	84 2b       	or	r24, r20
     878:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	cf 91       	pop	r28
     886:	df 91       	pop	r29
     888:	08 95       	ret

0000088a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     88a:	df 93       	push	r29
     88c:	cf 93       	push	r28
     88e:	00 d0       	rcall	.+0      	; 0x890 <GPIO_readPin+0x6>
     890:	00 d0       	rcall	.+0      	; 0x892 <GPIO_readPin+0x8>
     892:	00 d0       	rcall	.+0      	; 0x894 <GPIO_readPin+0xa>
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	89 83       	std	Y+1, r24	; 0x01
     89a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>4|| pin_num > 8 )
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	85 30       	cpi	r24, 0x05	; 5
     8a0:	18 f4       	brcc	.+6      	; 0x8a8 <GPIO_readPin+0x1e>
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	89 30       	cpi	r24, 0x09	; 9
     8a6:	10 f0       	brcs	.+4      	; 0x8ac <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
     8a8:	1d 82       	std	Y+5, r1	; 0x05
     8aa:	82 c0       	rjmp	.+260    	; 0x9b0 <GPIO_readPin+0x126>
	}else
	{
		switch(port_num)
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	28 2f       	mov	r18, r24
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	3c 83       	std	Y+4, r19	; 0x04
     8b4:	2b 83       	std	Y+3, r18	; 0x03
     8b6:	4b 81       	ldd	r20, Y+3	; 0x03
     8b8:	5c 81       	ldd	r21, Y+4	; 0x04
     8ba:	41 30       	cpi	r20, 0x01	; 1
     8bc:	51 05       	cpc	r21, r1
     8be:	79 f1       	breq	.+94     	; 0x91e <GPIO_readPin+0x94>
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	9c 81       	ldd	r25, Y+4	; 0x04
     8c4:	82 30       	cpi	r24, 0x02	; 2
     8c6:	91 05       	cpc	r25, r1
     8c8:	34 f4       	brge	.+12     	; 0x8d6 <GPIO_readPin+0x4c>
     8ca:	2b 81       	ldd	r18, Y+3	; 0x03
     8cc:	3c 81       	ldd	r19, Y+4	; 0x04
     8ce:	21 15       	cp	r18, r1
     8d0:	31 05       	cpc	r19, r1
     8d2:	69 f0       	breq	.+26     	; 0x8ee <GPIO_readPin+0x64>
     8d4:	6c c0       	rjmp	.+216    	; 0x9ae <GPIO_readPin+0x124>
     8d6:	4b 81       	ldd	r20, Y+3	; 0x03
     8d8:	5c 81       	ldd	r21, Y+4	; 0x04
     8da:	42 30       	cpi	r20, 0x02	; 2
     8dc:	51 05       	cpc	r21, r1
     8de:	b9 f1       	breq	.+110    	; 0x94e <GPIO_readPin+0xc4>
     8e0:	8b 81       	ldd	r24, Y+3	; 0x03
     8e2:	9c 81       	ldd	r25, Y+4	; 0x04
     8e4:	83 30       	cpi	r24, 0x03	; 3
     8e6:	91 05       	cpc	r25, r1
     8e8:	09 f4       	brne	.+2      	; 0x8ec <GPIO_readPin+0x62>
     8ea:	49 c0       	rjmp	.+146    	; 0x97e <GPIO_readPin+0xf4>
     8ec:	60 c0       	rjmp	.+192    	; 0x9ae <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num)){
     8ee:	e9 e3       	ldi	r30, 0x39	; 57
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	28 2f       	mov	r18, r24
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	88 2f       	mov	r24, r24
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	a9 01       	movw	r20, r18
     900:	02 c0       	rjmp	.+4      	; 0x906 <GPIO_readPin+0x7c>
     902:	55 95       	asr	r21
     904:	47 95       	ror	r20
     906:	8a 95       	dec	r24
     908:	e2 f7       	brpl	.-8      	; 0x902 <GPIO_readPin+0x78>
     90a:	ca 01       	movw	r24, r20
     90c:	81 70       	andi	r24, 0x01	; 1
     90e:	90 70       	andi	r25, 0x00	; 0
     910:	88 23       	and	r24, r24
     912:	19 f0       	breq	.+6      	; 0x91a <GPIO_readPin+0x90>
				return LOGIC_HIGH;
     914:	51 e0       	ldi	r21, 0x01	; 1
     916:	5d 83       	std	Y+5, r21	; 0x05
     918:	4b c0       	rjmp	.+150    	; 0x9b0 <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
     91a:	1d 82       	std	Y+5, r1	; 0x05
     91c:	49 c0       	rjmp	.+146    	; 0x9b0 <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num)){
     91e:	e6 e3       	ldi	r30, 0x36	; 54
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	28 2f       	mov	r18, r24
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	8a 81       	ldd	r24, Y+2	; 0x02
     92a:	88 2f       	mov	r24, r24
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	a9 01       	movw	r20, r18
     930:	02 c0       	rjmp	.+4      	; 0x936 <GPIO_readPin+0xac>
     932:	55 95       	asr	r21
     934:	47 95       	ror	r20
     936:	8a 95       	dec	r24
     938:	e2 f7       	brpl	.-8      	; 0x932 <GPIO_readPin+0xa8>
     93a:	ca 01       	movw	r24, r20
     93c:	81 70       	andi	r24, 0x01	; 1
     93e:	90 70       	andi	r25, 0x00	; 0
     940:	88 23       	and	r24, r24
     942:	19 f0       	breq	.+6      	; 0x94a <GPIO_readPin+0xc0>
				return LOGIC_HIGH;
     944:	51 e0       	ldi	r21, 0x01	; 1
     946:	5d 83       	std	Y+5, r21	; 0x05
     948:	33 c0       	rjmp	.+102    	; 0x9b0 <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
     94a:	1d 82       	std	Y+5, r1	; 0x05
     94c:	31 c0       	rjmp	.+98     	; 0x9b0 <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num)){
     94e:	e3 e3       	ldi	r30, 0x33	; 51
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	28 2f       	mov	r18, r24
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	8a 81       	ldd	r24, Y+2	; 0x02
     95a:	88 2f       	mov	r24, r24
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	a9 01       	movw	r20, r18
     960:	02 c0       	rjmp	.+4      	; 0x966 <GPIO_readPin+0xdc>
     962:	55 95       	asr	r21
     964:	47 95       	ror	r20
     966:	8a 95       	dec	r24
     968:	e2 f7       	brpl	.-8      	; 0x962 <GPIO_readPin+0xd8>
     96a:	ca 01       	movw	r24, r20
     96c:	81 70       	andi	r24, 0x01	; 1
     96e:	90 70       	andi	r25, 0x00	; 0
     970:	88 23       	and	r24, r24
     972:	19 f0       	breq	.+6      	; 0x97a <GPIO_readPin+0xf0>
				return LOGIC_HIGH;
     974:	51 e0       	ldi	r21, 0x01	; 1
     976:	5d 83       	std	Y+5, r21	; 0x05
     978:	1b c0       	rjmp	.+54     	; 0x9b0 <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
     97a:	1d 82       	std	Y+5, r1	; 0x05
     97c:	19 c0       	rjmp	.+50     	; 0x9b0 <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num)){
     97e:	e0 e3       	ldi	r30, 0x30	; 48
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
     984:	28 2f       	mov	r18, r24
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	8a 81       	ldd	r24, Y+2	; 0x02
     98a:	88 2f       	mov	r24, r24
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a9 01       	movw	r20, r18
     990:	02 c0       	rjmp	.+4      	; 0x996 <GPIO_readPin+0x10c>
     992:	55 95       	asr	r21
     994:	47 95       	ror	r20
     996:	8a 95       	dec	r24
     998:	e2 f7       	brpl	.-8      	; 0x992 <GPIO_readPin+0x108>
     99a:	ca 01       	movw	r24, r20
     99c:	81 70       	andi	r24, 0x01	; 1
     99e:	90 70       	andi	r25, 0x00	; 0
     9a0:	88 23       	and	r24, r24
     9a2:	19 f0       	breq	.+6      	; 0x9aa <GPIO_readPin+0x120>
				return LOGIC_HIGH;
     9a4:	51 e0       	ldi	r21, 0x01	; 1
     9a6:	5d 83       	std	Y+5, r21	; 0x05
     9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
     9aa:	1d 82       	std	Y+5, r1	; 0x05
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <GPIO_readPin+0x126>
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <GPIO_readPin+0x12a>
			}
			break;

		}
}
}
     9b0:	8d 81       	ldd	r24, Y+5	; 0x05
     9b2:	8e 83       	std	Y+6, r24	; 0x06
     9b4:	8e 81       	ldd	r24, Y+6	; 0x06
     9b6:	26 96       	adiw	r28, 0x06	; 6
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	cf 91       	pop	r28
     9c4:	df 91       	pop	r29
     9c6:	08 95       	ret

000009c8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     9c8:	df 93       	push	r29
     9ca:	cf 93       	push	r28
     9cc:	00 d0       	rcall	.+0      	; 0x9ce <GPIO_setupPortDirection+0x6>
     9ce:	00 d0       	rcall	.+0      	; 0x9d0 <GPIO_setupPortDirection+0x8>
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	84 30       	cpi	r24, 0x04	; 4
     9dc:	90 f5       	brcc	.+100    	; 0xa42 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	28 2f       	mov	r18, r24
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	3c 83       	std	Y+4, r19	; 0x04
     9e6:	2b 83       	std	Y+3, r18	; 0x03
     9e8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ea:	9c 81       	ldd	r25, Y+4	; 0x04
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	91 05       	cpc	r25, r1
     9f0:	d1 f0       	breq	.+52     	; 0xa26 <GPIO_setupPortDirection+0x5e>
     9f2:	2b 81       	ldd	r18, Y+3	; 0x03
     9f4:	3c 81       	ldd	r19, Y+4	; 0x04
     9f6:	22 30       	cpi	r18, 0x02	; 2
     9f8:	31 05       	cpc	r19, r1
     9fa:	2c f4       	brge	.+10     	; 0xa06 <GPIO_setupPortDirection+0x3e>
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	61 f0       	breq	.+24     	; 0xa1c <GPIO_setupPortDirection+0x54>
     a04:	1e c0       	rjmp	.+60     	; 0xa42 <GPIO_setupPortDirection+0x7a>
     a06:	2b 81       	ldd	r18, Y+3	; 0x03
     a08:	3c 81       	ldd	r19, Y+4	; 0x04
     a0a:	22 30       	cpi	r18, 0x02	; 2
     a0c:	31 05       	cpc	r19, r1
     a0e:	81 f0       	breq	.+32     	; 0xa30 <GPIO_setupPortDirection+0x68>
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	83 30       	cpi	r24, 0x03	; 3
     a16:	91 05       	cpc	r25, r1
     a18:	81 f0       	breq	.+32     	; 0xa3a <GPIO_setupPortDirection+0x72>
     a1a:	13 c0       	rjmp	.+38     	; 0xa42 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     a1c:	ea e3       	ldi	r30, 0x3A	; 58
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	8a 81       	ldd	r24, Y+2	; 0x02
     a22:	80 83       	st	Z, r24
     a24:	0e c0       	rjmp	.+28     	; 0xa42 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     a26:	e7 e3       	ldi	r30, 0x37	; 55
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	8a 81       	ldd	r24, Y+2	; 0x02
     a2c:	80 83       	st	Z, r24
     a2e:	09 c0       	rjmp	.+18     	; 0xa42 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     a30:	e4 e3       	ldi	r30, 0x34	; 52
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	8a 81       	ldd	r24, Y+2	; 0x02
     a36:	80 83       	st	Z, r24
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     a3a:	e1 e3       	ldi	r30, 0x31	; 49
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	80 83       	st	Z, r24
			break;
		}
	}
}
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	00 d0       	rcall	.+0      	; 0xa56 <GPIO_writePort+0x6>
     a56:	00 d0       	rcall	.+0      	; 0xa58 <GPIO_writePort+0x8>
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	84 30       	cpi	r24, 0x04	; 4
     a64:	90 f5       	brcc	.+100    	; 0xaca <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	28 2f       	mov	r18, r24
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	3c 83       	std	Y+4, r19	; 0x04
     a6e:	2b 83       	std	Y+3, r18	; 0x03
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	9c 81       	ldd	r25, Y+4	; 0x04
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	91 05       	cpc	r25, r1
     a78:	d1 f0       	breq	.+52     	; 0xaae <GPIO_writePort+0x5e>
     a7a:	2b 81       	ldd	r18, Y+3	; 0x03
     a7c:	3c 81       	ldd	r19, Y+4	; 0x04
     a7e:	22 30       	cpi	r18, 0x02	; 2
     a80:	31 05       	cpc	r19, r1
     a82:	2c f4       	brge	.+10     	; 0xa8e <GPIO_writePort+0x3e>
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	00 97       	sbiw	r24, 0x00	; 0
     a8a:	61 f0       	breq	.+24     	; 0xaa4 <GPIO_writePort+0x54>
     a8c:	1e c0       	rjmp	.+60     	; 0xaca <GPIO_writePort+0x7a>
     a8e:	2b 81       	ldd	r18, Y+3	; 0x03
     a90:	3c 81       	ldd	r19, Y+4	; 0x04
     a92:	22 30       	cpi	r18, 0x02	; 2
     a94:	31 05       	cpc	r19, r1
     a96:	81 f0       	breq	.+32     	; 0xab8 <GPIO_writePort+0x68>
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	83 30       	cpi	r24, 0x03	; 3
     a9e:	91 05       	cpc	r25, r1
     aa0:	81 f0       	breq	.+32     	; 0xac2 <GPIO_writePort+0x72>
     aa2:	13 c0       	rjmp	.+38     	; 0xaca <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
     aa4:	eb e3       	ldi	r30, 0x3B	; 59
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	80 83       	st	Z, r24
     aac:	0e c0       	rjmp	.+28     	; 0xaca <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
     aae:	e8 e3       	ldi	r30, 0x38	; 56
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	8a 81       	ldd	r24, Y+2	; 0x02
     ab4:	80 83       	st	Z, r24
     ab6:	09 c0       	rjmp	.+18     	; 0xaca <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
     ab8:	e5 e3       	ldi	r30, 0x35	; 53
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	8a 81       	ldd	r24, Y+2	; 0x02
     abe:	80 83       	st	Z, r24
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
     ac2:	e2 e3       	ldi	r30, 0x32	; 50
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	8a 81       	ldd	r24, Y+2	; 0x02
     ac8:	80 83       	st	Z, r24
			break;
		}
	}

}
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	cf 91       	pop	r28
     ad4:	df 91       	pop	r29
     ad6:	08 95       	ret

00000ad8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     ad8:	df 93       	push	r29
     ada:	cf 93       	push	r28
     adc:	00 d0       	rcall	.+0      	; 0xade <GPIO_readPort+0x6>
     ade:	00 d0       	rcall	.+0      	; 0xae0 <GPIO_readPort+0x8>
     ae0:	0f 92       	push	r0
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
     ae6:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	84 30       	cpi	r24, 0x04	; 4
     aec:	10 f0       	brcs	.+4      	; 0xaf2 <GPIO_readPort+0x1a>
	{
		/* Do Nothing */
		return LOGIC_LOW;
     aee:	1c 82       	std	Y+4, r1	; 0x04
     af0:	34 c0       	rjmp	.+104    	; 0xb5a <GPIO_readPort+0x82>
	}
	/* Setup the port direction as required */
		switch(port_num)
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	28 2f       	mov	r18, r24
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	3b 83       	std	Y+3, r19	; 0x03
     afa:	2a 83       	std	Y+2, r18	; 0x02
     afc:	8a 81       	ldd	r24, Y+2	; 0x02
     afe:	9b 81       	ldd	r25, Y+3	; 0x03
     b00:	81 30       	cpi	r24, 0x01	; 1
     b02:	91 05       	cpc	r25, r1
     b04:	d1 f0       	breq	.+52     	; 0xb3a <GPIO_readPort+0x62>
     b06:	2a 81       	ldd	r18, Y+2	; 0x02
     b08:	3b 81       	ldd	r19, Y+3	; 0x03
     b0a:	22 30       	cpi	r18, 0x02	; 2
     b0c:	31 05       	cpc	r19, r1
     b0e:	2c f4       	brge	.+10     	; 0xb1a <GPIO_readPort+0x42>
     b10:	8a 81       	ldd	r24, Y+2	; 0x02
     b12:	9b 81       	ldd	r25, Y+3	; 0x03
     b14:	00 97       	sbiw	r24, 0x00	; 0
     b16:	61 f0       	breq	.+24     	; 0xb30 <GPIO_readPort+0x58>
     b18:	1f c0       	rjmp	.+62     	; 0xb58 <GPIO_readPort+0x80>
     b1a:	2a 81       	ldd	r18, Y+2	; 0x02
     b1c:	3b 81       	ldd	r19, Y+3	; 0x03
     b1e:	22 30       	cpi	r18, 0x02	; 2
     b20:	31 05       	cpc	r19, r1
     b22:	81 f0       	breq	.+32     	; 0xb44 <GPIO_readPort+0x6c>
     b24:	8a 81       	ldd	r24, Y+2	; 0x02
     b26:	9b 81       	ldd	r25, Y+3	; 0x03
     b28:	83 30       	cpi	r24, 0x03	; 3
     b2a:	91 05       	cpc	r25, r1
     b2c:	81 f0       	breq	.+32     	; 0xb4e <GPIO_readPort+0x76>
     b2e:	14 c0       	rjmp	.+40     	; 0xb58 <GPIO_readPort+0x80>
		{
		case PORTA_ID:
			return PINA;
     b30:	e9 e3       	ldi	r30, 0x39	; 57
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	90 81       	ld	r25, Z
     b36:	9c 83       	std	Y+4, r25	; 0x04
     b38:	10 c0       	rjmp	.+32     	; 0xb5a <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			return PINB;
     b3a:	e6 e3       	ldi	r30, 0x36	; 54
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	20 81       	ld	r18, Z
     b40:	2c 83       	std	Y+4, r18	; 0x04
     b42:	0b c0       	rjmp	.+22     	; 0xb5a <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			return PINC;
     b44:	e3 e3       	ldi	r30, 0x33	; 51
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	30 81       	ld	r19, Z
     b4a:	3c 83       	std	Y+4, r19	; 0x04
     b4c:	06 c0       	rjmp	.+12     	; 0xb5a <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			return PIND;
     b4e:	e0 e3       	ldi	r30, 0x30	; 48
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8c 83       	std	Y+4, r24	; 0x04
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <GPIO_readPort+0x82>
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <GPIO_readPort+0x86>
			break;
		}
}
     b5a:	9c 81       	ldd	r25, Y+4	; 0x04
     b5c:	9d 83       	std	Y+5, r25	; 0x05
     b5e:	8d 81       	ldd	r24, Y+5	; 0x05
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <Timer0_PWM_init>:
#include "pwm.h"
#include"std_types.h"
#include"gpio.h"
#include<avr\io.h>
void Timer0_PWM_init(uint8 cycle)
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	0f 92       	push	r0
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
     b7c:	e2 e5       	ldi	r30, 0x52	; 82
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	10 82       	st	Z, r1

	OCR0  = cycle; // Set Compare Value
     b82:	ec e5       	ldi	r30, 0x5C	; 92
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	80 83       	st	Z, r24

/*	DDRB  = DDRB | (1<<PB3);
 * // Configure PB3/OC0 as output pin -->
 * pin where the PWM signal is generated from MC*/
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	63 e0       	ldi	r22, 0x03	; 3
     b8e:	41 e0       	ldi	r20, 0x01	; 1
     b90:	0e 94 6f 02 	call	0x4de	; 0x4de <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     b94:	e3 e5       	ldi	r30, 0x53	; 83
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	8a e6       	ldi	r24, 0x6A	; 106
     b9a:	80 83       	st	Z, r24
}
     b9c:	0f 90       	pop	r0
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <__vector_9>:
initial value is written in TCNT1 (16-BITS)
OCR1A Will write in it the value we want to compare to
in TIMSK we will enable CTC interrupt in case of CTC OCIE1A
TOIE1 in case of OVF
*/
ISR(TIMER1_OVF_vect){
     ba4:	1f 92       	push	r1
     ba6:	0f 92       	push	r0
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	0f 92       	push	r0
     bac:	11 24       	eor	r1, r1
     bae:	2f 93       	push	r18
     bb0:	3f 93       	push	r19
     bb2:	4f 93       	push	r20
     bb4:	5f 93       	push	r21
     bb6:	6f 93       	push	r22
     bb8:	7f 93       	push	r23
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	af 93       	push	r26
     bc0:	bf 93       	push	r27
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
	if(callback_ptr != NULL){
     bce:	80 91 6c 00 	lds	r24, 0x006C
     bd2:	90 91 6d 00 	lds	r25, 0x006D
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	29 f0       	breq	.+10     	; 0xbe4 <__vector_9+0x40>
		callback_ptr();
     bda:	e0 91 6c 00 	lds	r30, 0x006C
     bde:	f0 91 6d 00 	lds	r31, 0x006D
     be2:	09 95       	icall
	}
}
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	ff 91       	pop	r31
     bea:	ef 91       	pop	r30
     bec:	bf 91       	pop	r27
     bee:	af 91       	pop	r26
     bf0:	9f 91       	pop	r25
     bf2:	8f 91       	pop	r24
     bf4:	7f 91       	pop	r23
     bf6:	6f 91       	pop	r22
     bf8:	5f 91       	pop	r21
     bfa:	4f 91       	pop	r20
     bfc:	3f 91       	pop	r19
     bfe:	2f 91       	pop	r18
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	0f 90       	pop	r0
     c06:	1f 90       	pop	r1
     c08:	18 95       	reti

00000c0a <__vector_7>:
ISR(TIMER1_COMPA_vect){
     c0a:	1f 92       	push	r1
     c0c:	0f 92       	push	r0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	0f 92       	push	r0
     c12:	11 24       	eor	r1, r1
     c14:	2f 93       	push	r18
     c16:	3f 93       	push	r19
     c18:	4f 93       	push	r20
     c1a:	5f 93       	push	r21
     c1c:	6f 93       	push	r22
     c1e:	7f 93       	push	r23
     c20:	8f 93       	push	r24
     c22:	9f 93       	push	r25
     c24:	af 93       	push	r26
     c26:	bf 93       	push	r27
     c28:	ef 93       	push	r30
     c2a:	ff 93       	push	r31
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
	if(callback_ptr != NULL){
     c34:	80 91 6c 00 	lds	r24, 0x006C
     c38:	90 91 6d 00 	lds	r25, 0x006D
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	29 f0       	breq	.+10     	; 0xc4a <__vector_7+0x40>
			callback_ptr();
     c40:	e0 91 6c 00 	lds	r30, 0x006C
     c44:	f0 91 6d 00 	lds	r31, 0x006D
     c48:	09 95       	icall
	}
}
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	bf 91       	pop	r27
     c54:	af 91       	pop	r26
     c56:	9f 91       	pop	r25
     c58:	8f 91       	pop	r24
     c5a:	7f 91       	pop	r23
     c5c:	6f 91       	pop	r22
     c5e:	5f 91       	pop	r21
     c60:	4f 91       	pop	r20
     c62:	3f 91       	pop	r19
     c64:	2f 91       	pop	r18
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType* config_ptr){
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	00 d0       	rcall	.+0      	; 0xc76 <Timer1_init+0x6>
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	9a 83       	std	Y+2, r25	; 0x02
     c7c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = config_ptr->intial_value;
     c7e:	ac e4       	ldi	r26, 0x4C	; 76
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e9 81       	ldd	r30, Y+1	; 0x01
     c84:	fa 81       	ldd	r31, Y+2	; 0x02
     c86:	80 81       	ld	r24, Z
     c88:	91 81       	ldd	r25, Z+1	; 0x01
     c8a:	11 96       	adiw	r26, 0x01	; 1
     c8c:	9c 93       	st	X, r25
     c8e:	8e 93       	st	-X, r24
	TCCR1A |= (1<<FOC1A);
     c90:	af e4       	ldi	r26, 0x4F	; 79
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	ef e4       	ldi	r30, 0x4F	; 79
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	88 60       	ori	r24, 0x08	; 8
     c9c:	8c 93       	st	X, r24
	if(config_ptr->mode == normal_mode){
     c9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ca0:	fa 81       	ldd	r31, Y+2	; 0x02
     ca2:	85 81       	ldd	r24, Z+5	; 0x05
     ca4:	88 23       	and	r24, r24
     ca6:	91 f4       	brne	.+36     	; 0xccc <Timer1_init+0x5c>
		TIMSK |= (1<<TOIE1);
     ca8:	a9 e5       	ldi	r26, 0x59	; 89
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e9 e5       	ldi	r30, 0x59	; 89
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	84 60       	ori	r24, 0x04	; 4
     cb4:	8c 93       	st	X, r24
		TCCR1B |= (config_ptr->prescaler);
     cb6:	ae e4       	ldi	r26, 0x4E	; 78
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	ee e4       	ldi	r30, 0x4E	; 78
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	90 81       	ld	r25, Z
     cc0:	e9 81       	ldd	r30, Y+1	; 0x01
     cc2:	fa 81       	ldd	r31, Y+2	; 0x02
     cc4:	84 81       	ldd	r24, Z+4	; 0x04
     cc6:	89 2b       	or	r24, r25
     cc8:	8c 93       	st	X, r24
     cca:	1b c0       	rjmp	.+54     	; 0xd02 <Timer1_init+0x92>
	}else{
		OCR1A = config_ptr->compare_value;
     ccc:	aa e4       	ldi	r26, 0x4A	; 74
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e9 81       	ldd	r30, Y+1	; 0x01
     cd2:	fa 81       	ldd	r31, Y+2	; 0x02
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	93 81       	ldd	r25, Z+3	; 0x03
     cd8:	11 96       	adiw	r26, 0x01	; 1
     cda:	9c 93       	st	X, r25
     cdc:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);
     cde:	a9 e5       	ldi	r26, 0x59	; 89
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e9 e5       	ldi	r30, 0x59	; 89
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 61       	ori	r24, 0x10	; 16
     cea:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12)|(config_ptr->prescaler);
     cec:	ae e4       	ldi	r26, 0x4E	; 78
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ee e4       	ldi	r30, 0x4E	; 78
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	90 81       	ld	r25, Z
     cf6:	e9 81       	ldd	r30, Y+1	; 0x01
     cf8:	fa 81       	ldd	r31, Y+2	; 0x02
     cfa:	84 81       	ldd	r24, Z+4	; 0x04
     cfc:	89 2b       	or	r24, r25
     cfe:	88 60       	ori	r24, 0x08	; 8
     d00:	8c 93       	st	X, r24
	}
}
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <Timer1_deInit>:


void Timer1_deInit(void){
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
     d14:	ae e4       	ldi	r26, 0x4E	; 78
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	ee e4       	ldi	r30, 0x4E	; 78
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	88 7f       	andi	r24, 0xF8	; 248
     d20:	8c 93       	st	X, r24
}
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <Timer1_setCallBack+0x6>
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	9a 83       	std	Y+2, r25	; 0x02
     d34:	89 83       	std	Y+1, r24	; 0x01
	callback_ptr = a_ptr;
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	90 93 6d 00 	sts	0x006D, r25
     d3e:	80 93 6c 00 	sts	0x006C, r24
}
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType* config_ptr)
{
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	00 d0       	rcall	.+0      	; 0xd56 <TWI_init+0xa>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	9a 83       	std	Y+2, r25	; 0x02
     d5c:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	/* SCL FREQ = F_CPU /(16+2 *TWBR *4^TWPS)*/
    TWBR = ((F_CPU/config_ptr->bit_rate)-16)/2;
     d5e:	00 e2       	ldi	r16, 0x20	; 32
     d60:	10 e0       	ldi	r17, 0x00	; 0
     d62:	e9 81       	ldd	r30, Y+1	; 0x01
     d64:	fa 81       	ldd	r31, Y+2	; 0x02
     d66:	21 81       	ldd	r18, Z+1	; 0x01
     d68:	32 81       	ldd	r19, Z+2	; 0x02
     d6a:	43 81       	ldd	r20, Z+3	; 0x03
     d6c:	54 81       	ldd	r21, Z+4	; 0x04
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	92 e1       	ldi	r25, 0x12	; 18
     d72:	aa e7       	ldi	r26, 0x7A	; 122
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	bc 01       	movw	r22, r24
     d78:	cd 01       	movw	r24, r26
     d7a:	0e 94 4b 08 	call	0x1096	; 0x1096 <__udivmodsi4>
     d7e:	da 01       	movw	r26, r20
     d80:	c9 01       	movw	r24, r18
     d82:	40 97       	sbiw	r24, 0x10	; 16
     d84:	a1 09       	sbc	r26, r1
     d86:	b1 09       	sbc	r27, r1
     d88:	b6 95       	lsr	r27
     d8a:	a7 95       	ror	r26
     d8c:	97 95       	ror	r25
     d8e:	87 95       	ror	r24
     d90:	f8 01       	movw	r30, r16
     d92:	80 83       	st	Z, r24
	TWSR = 0x00;
     d94:	e1 e2       	ldi	r30, 0x21	; 33
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
     d9a:	e2 e2       	ldi	r30, 0x22	; 34
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
     da2:	e6 e5       	ldi	r30, 0x56	; 86
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	84 e0       	ldi	r24, 0x04	; 4
     da8:	80 83       	st	Z, r24
}
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	08 95       	ret

00000db8 <TWI_start>:

void TWI_start(void)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     dc0:	e6 e5       	ldi	r30, 0x56	; 86
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	84 ea       	ldi	r24, 0xA4	; 164
     dc6:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     dc8:	e6 e5       	ldi	r30, 0x56	; 86
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	88 23       	and	r24, r24
     dd0:	dc f7       	brge	.-10     	; 0xdc8 <TWI_start+0x10>
}
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <TWI_stop>:

void TWI_stop(void)
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     de0:	e6 e5       	ldi	r30, 0x56	; 86
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	84 e9       	ldi	r24, 0x94	; 148
     de6:	80 83       	st	Z, r24
}
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     dfa:	e3 e2       	ldi	r30, 0x23	; 35
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     e02:	e6 e5       	ldi	r30, 0x56	; 86
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	84 e8       	ldi	r24, 0x84	; 132
     e08:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e0a:	e6 e5       	ldi	r30, 0x56	; 86
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	88 23       	and	r24, r24
     e12:	dc f7       	brge	.-10     	; 0xe0a <TWI_writeByte+0x1c>
}
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     e24:	e6 e5       	ldi	r30, 0x56	; 86
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	84 ec       	ldi	r24, 0xC4	; 196
     e2a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e2c:	e6 e5       	ldi	r30, 0x56	; 86
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	88 23       	and	r24, r24
     e34:	dc f7       	brge	.-10     	; 0xe2c <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
     e36:	e3 e2       	ldi	r30, 0x23	; 35
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
}
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e4a:	e6 e5       	ldi	r30, 0x56	; 86
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	84 e8       	ldi	r24, 0x84	; 132
     e50:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e52:	e6 e5       	ldi	r30, 0x56	; 86
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	88 23       	and	r24, r24
     e5a:	dc f7       	brge	.-10     	; 0xe52 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
     e5c:	e3 e2       	ldi	r30, 0x23	; 35
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     e72:	e1 e2       	ldi	r30, 0x21	; 33
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	88 7f       	andi	r24, 0xF8	; 248
     e7a:	89 83       	std	Y+1, r24	; 0x01
    return status;
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <UART_init>:
#include "uart.h"
#include "avr/io.h"
#include"common_macros.h"

void UART_init(UART_ConfigType* config)
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <UART_init+0x6>
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <UART_init+0x8>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	9c 83       	std	Y+4, r25	; 0x04
     e94:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     e96:	1a 82       	std	Y+2, r1	; 0x02
     e98:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     e9a:	eb e2       	ldi	r30, 0x2B	; 43
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL)| (config->parity<<4)|\
     ea2:	a0 e4       	ldi	r26, 0x40	; 64
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	eb 81       	ldd	r30, Y+3	; 0x03
     ea8:	fc 81       	ldd	r31, Y+4	; 0x04
     eaa:	81 81       	ldd	r24, Z+1	; 0x01
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	82 95       	swap	r24
     eb2:	92 95       	swap	r25
     eb4:	90 7f       	andi	r25, 0xF0	; 240
     eb6:	98 27       	eor	r25, r24
     eb8:	80 7f       	andi	r24, 0xF0	; 240
     eba:	98 27       	eor	r25, r24
     ebc:	28 2f       	mov	r18, r24
     ebe:	20 68       	ori	r18, 0x80	; 128
     ec0:	eb 81       	ldd	r30, Y+3	; 0x03
     ec2:	fc 81       	ldd	r31, Y+4	; 0x04
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	28 2b       	or	r18, r24
     ed8:	eb 81       	ldd	r30, Y+3	; 0x03
     eda:	fc 81       	ldd	r31, Y+4	; 0x04
     edc:	80 81       	ld	r24, Z
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	83 70       	andi	r24, 0x03	; 3
     ee4:	90 70       	andi	r25, 0x00	; 0
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	82 2b       	or	r24, r18
     eec:	8c 93       	st	X, r24
			(config->stop_bit<<3)|((config->bit_data &0x03)<<1);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->baud_rate * 8UL))) - 1);
     eee:	eb 81       	ldd	r30, Y+3	; 0x03
     ef0:	fc 81       	ldd	r31, Y+4	; 0x04
     ef2:	83 81       	ldd	r24, Z+3	; 0x03
     ef4:	94 81       	ldd	r25, Z+4	; 0x04
     ef6:	a5 81       	ldd	r26, Z+5	; 0x05
     ef8:	b6 81       	ldd	r27, Z+6	; 0x06
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	aa 1f       	adc	r26, r26
     f00:	bb 1f       	adc	r27, r27
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	aa 1f       	adc	r26, r26
     f08:	bb 1f       	adc	r27, r27
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	aa 1f       	adc	r26, r26
     f10:	bb 1f       	adc	r27, r27
     f12:	9c 01       	movw	r18, r24
     f14:	ad 01       	movw	r20, r26
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	92 e1       	ldi	r25, 0x12	; 18
     f1a:	aa e7       	ldi	r26, 0x7A	; 122
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 4b 08 	call	0x1096	; 0x1096 <__udivmodsi4>
     f26:	da 01       	movw	r26, r20
     f28:	c9 01       	movw	r24, r18
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     f30:	e0 e4       	ldi	r30, 0x40	; 64
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	89 2f       	mov	r24, r25
     f3a:	99 27       	eor	r25, r25
     f3c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     f3e:	e9 e2       	ldi	r30, 0x29	; 41
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	80 83       	st	Z, r24
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 8-bit data mode
		 * RXB8 & TXB8 not used for 8-bit data mode
		 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN)|((config->bit_data & 0x04)<<2);
     f46:	aa e2       	ldi	r26, 0x2A	; 42
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	eb 81       	ldd	r30, Y+3	; 0x03
     f4c:	fc 81       	ldd	r31, Y+4	; 0x04
     f4e:	80 81       	ld	r24, Z
     f50:	88 2f       	mov	r24, r24
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	84 70       	andi	r24, 0x04	; 4
     f56:	90 70       	andi	r25, 0x00	; 0
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	88 61       	ori	r24, 0x18	; 24
     f62:	8c 93       	st	X, r24




}
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <UART_sendByte>:


void UART_sendByte(const uint8 data)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	0f 92       	push	r0
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     f7e:	eb e2       	ldi	r30, 0x2B	; 43
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	80 72       	andi	r24, 0x20	; 32
     f8a:	90 70       	andi	r25, 0x00	; 0
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	b9 f3       	breq	.-18     	; 0xf7e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     f90:	ec e2       	ldi	r30, 0x2C	; 44
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <UART_recieveByte>:


uint8 UART_recieveByte(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     fa8:	eb e2       	ldi	r30, 0x2B	; 43
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	88 23       	and	r24, r24
     fb0:	dc f7       	brge	.-10     	; 0xfa8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
     fb2:	ec e2       	ldi	r30, 0x2C	; 44
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
}
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <UART_sendString+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	9b 83       	std	Y+3, r25	; 0x03
     fcc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     fce:	19 82       	std	Y+1, r1	; 0x01
     fd0:	0e c0       	rjmp	.+28     	; 0xfee <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	9b 81       	ldd	r25, Y+3	; 0x03
     fdc:	fc 01       	movw	r30, r24
     fde:	e2 0f       	add	r30, r18
     fe0:	f3 1f       	adc	r31, r19
     fe2:	80 81       	ld	r24, Z
     fe4:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
		i++;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	9b 81       	ldd	r25, Y+3	; 0x03
     ff8:	fc 01       	movw	r30, r24
     ffa:	e2 0f       	add	r30, r18
     ffc:	f3 1f       	adc	r31, r19
     ffe:	80 81       	ld	r24, Z
    1000:	88 23       	and	r24, r24
    1002:	39 f7       	brne	.-50     	; 0xfd2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <UART_receiveString+0xa>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	9b 83       	std	Y+3, r25	; 0x03
    1022:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1024:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	9b 81       	ldd	r25, Y+3	; 0x03
    1030:	8c 01       	movw	r16, r24
    1032:	02 0f       	add	r16, r18
    1034:	13 1f       	adc	r17, r19
    1036:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
    103a:	f8 01       	movw	r30, r16
    103c:	80 83       	st	Z, r24
    103e:	0f c0       	rjmp	.+30     	; 0x105e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	8f 5f       	subi	r24, 0xFF	; 255
    1044:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	9b 81       	ldd	r25, Y+3	; 0x03
    1050:	8c 01       	movw	r16, r24
    1052:	02 0f       	add	r16, r18
    1054:	13 1f       	adc	r17, r19
    1056:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_recieveByte>
    105a:	f8 01       	movw	r30, r16
    105c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	9b 81       	ldd	r25, Y+3	; 0x03
    1068:	fc 01       	movw	r30, r24
    106a:	e2 0f       	add	r30, r18
    106c:	f3 1f       	adc	r31, r19
    106e:	80 81       	ld	r24, Z
    1070:	83 32       	cpi	r24, 0x23	; 35
    1072:	31 f7       	brne	.-52     	; 0x1040 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	9b 81       	ldd	r25, Y+3	; 0x03
    107e:	fc 01       	movw	r30, r24
    1080:	e2 0f       	add	r30, r18
    1082:	f3 1f       	adc	r31, r19
    1084:	10 82       	st	Z, r1
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <__udivmodsi4>:
    1096:	a1 e2       	ldi	r26, 0x21	; 33
    1098:	1a 2e       	mov	r1, r26
    109a:	aa 1b       	sub	r26, r26
    109c:	bb 1b       	sub	r27, r27
    109e:	fd 01       	movw	r30, r26
    10a0:	0d c0       	rjmp	.+26     	; 0x10bc <__udivmodsi4_ep>

000010a2 <__udivmodsi4_loop>:
    10a2:	aa 1f       	adc	r26, r26
    10a4:	bb 1f       	adc	r27, r27
    10a6:	ee 1f       	adc	r30, r30
    10a8:	ff 1f       	adc	r31, r31
    10aa:	a2 17       	cp	r26, r18
    10ac:	b3 07       	cpc	r27, r19
    10ae:	e4 07       	cpc	r30, r20
    10b0:	f5 07       	cpc	r31, r21
    10b2:	20 f0       	brcs	.+8      	; 0x10bc <__udivmodsi4_ep>
    10b4:	a2 1b       	sub	r26, r18
    10b6:	b3 0b       	sbc	r27, r19
    10b8:	e4 0b       	sbc	r30, r20
    10ba:	f5 0b       	sbc	r31, r21

000010bc <__udivmodsi4_ep>:
    10bc:	66 1f       	adc	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	1a 94       	dec	r1
    10c6:	69 f7       	brne	.-38     	; 0x10a2 <__udivmodsi4_loop>
    10c8:	60 95       	com	r22
    10ca:	70 95       	com	r23
    10cc:	80 95       	com	r24
    10ce:	90 95       	com	r25
    10d0:	9b 01       	movw	r18, r22
    10d2:	ac 01       	movw	r20, r24
    10d4:	bd 01       	movw	r22, r26
    10d6:	cf 01       	movw	r24, r30
    10d8:	08 95       	ret

000010da <_exit>:
    10da:	f8 94       	cli

000010dc <__stop_program>:
    10dc:	ff cf       	rjmp	.-2      	; 0x10dc <__stop_program>
